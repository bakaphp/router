{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started A tool to create multiple Phalcon 's Collection s with easy. Requirements PHP =7.1 Phalcon 3.4 or higher. Install composer require baka/router Usage use Baka\\Router\\RouteGroup ; use Baka\\Router\\Route ; $routes = [ Route :: get ( status ) // Method: GET // Paths: /status, /status/{id:[0-9]+} // Namespace: // Controller: StatusController // Action: index ]; // Group all the routes that has shared configutarions like namespace $routeGroup = RouteGroup :: from ( $routes ) - defaultNamespace ( App\\Api\\Controllers ); // Mount collections to the app $app = new \\Phalcon\\Mvc\\Micro (); foreach ( $routeGroup - toCollections () as $collection ){ $app - mount ( $collection ); }","title":"Getting Started"},{"location":"#getting-started","text":"A tool to create multiple Phalcon 's Collection s with easy.","title":"Getting Started"},{"location":"#requirements","text":"PHP =7.1 Phalcon 3.4 or higher.","title":"Requirements"},{"location":"#install","text":"composer require baka/router","title":"Install"},{"location":"#usage","text":"use Baka\\Router\\RouteGroup ; use Baka\\Router\\Route ; $routes = [ Route :: get ( status ) // Method: GET // Paths: /status, /status/{id:[0-9]+} // Namespace: // Controller: StatusController // Action: index ]; // Group all the routes that has shared configutarions like namespace $routeGroup = RouteGroup :: from ( $routes ) - defaultNamespace ( App\\Api\\Controllers ); // Mount collections to the app $app = new \\Phalcon\\Mvc\\Micro (); foreach ( $routeGroup - toCollections () as $collection ){ $app - mount ( $collection ); }","title":"Usage"},{"location":"routes/","text":"Routes Basic Usage use Baka\\Router\\Route ; $route = Route :: post ( user ); $route - controller ( userController ); $route - namespace ( App\\Api\\Controllers ); // OR Route :: post ( user ) - controller ( userController ) - namespace ( App\\Api\\Controllers ); Advanced Usage use Baka\\Router\\Route ; $route = Route :: post ( user ); Setting a Prefix The prefix method is used to set a prefix to the Route. // Adding Prefix $route - prefix ( admin ); Warning You shouldn't write a / at the end of the prefix. Setting the Controller The controller method is used to pass the name of the controller class that will handler the request. // Adding Controller $route - controller ( customController ); Tip You can pass a controller class property to avoid passing the namespace. $route - controller ( customController :: class ); Info If no controller was set, the Router generates a controller name based on the path given. In this case the controller name generated would be userController . See setDefaultController method in Route . Setting the Action Setting the Namespace Setting Http Verbs Setting Middlewares // Adding Action $route - action ( save ); // Adding Namespace $route - namespace ( App\\Api\\Controllers ); // Adding Middlewares $route - middlewares ( custom.middleware@before , another.middleware@before , ); // OR Route :: post ( user ) - prefix ( /v1 ) - controller ( userController ) - action ( save ) - namespace ( App\\Api\\Controllers ) - middlewares ( custom.middleware@before , another.middleware@before , );","title":"Routes"},{"location":"routes/#routes","text":"","title":"Routes"},{"location":"routes/#basic-usage","text":"use Baka\\Router\\Route ; $route = Route :: post ( user ); $route - controller ( userController ); $route - namespace ( App\\Api\\Controllers ); // OR Route :: post ( user ) - controller ( userController ) - namespace ( App\\Api\\Controllers );","title":"Basic Usage"},{"location":"routes/#advanced-usage","text":"use Baka\\Router\\Route ; $route = Route :: post ( user );","title":"Advanced Usage"},{"location":"routes/#setting-a-prefix","text":"The prefix method is used to set a prefix to the Route. // Adding Prefix $route - prefix ( admin ); Warning You shouldn't write a / at the end of the prefix.","title":"Setting a Prefix"},{"location":"routes/#setting-the-controller","text":"The controller method is used to pass the name of the controller class that will handler the request. // Adding Controller $route - controller ( customController ); Tip You can pass a controller class property to avoid passing the namespace. $route - controller ( customController :: class ); Info If no controller was set, the Router generates a controller name based on the path given. In this case the controller name generated would be userController . See setDefaultController method in Route .","title":"Setting the Controller"},{"location":"routes/#setting-the-action","text":"","title":"Setting the Action"},{"location":"routes/#setting-the-namespace","text":"","title":"Setting the Namespace"},{"location":"routes/#setting-http-verbs","text":"","title":"Setting Http Verbs"},{"location":"routes/#setting-middlewares","text":"// Adding Action $route - action ( save ); // Adding Namespace $route - namespace ( App\\Api\\Controllers ); // Adding Middlewares $route - middlewares ( custom.middleware@before , another.middleware@before , ); // OR Route :: post ( user ) - prefix ( /v1 ) - controller ( userController ) - action ( save ) - namespace ( App\\Api\\Controllers ) - middlewares ( custom.middleware@before , another.middleware@before , );","title":"Setting Middlewares"},{"location":"setting-route-middlewares/","text":"","title":"Setting route middlewares"}]}